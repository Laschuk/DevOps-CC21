# Конфигурация локального профиля AWS CLI с правами доступа ранее созданного 
# пользователя AWS для доступа к сервисам AWS.
# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html
aws configure --profile default
# AWS Access Key ID [None]:
# AWS Secret Access Key [None]:
# Default region  name [None]: 
# Default output format [None]: 

# Создание внутреннего хранилища (dedicated bucket) для файла tfstate в AWS S3
# Имя хранилища должно быть уникальным в пределах AWS S3
# aws s3 mb s3://<dedicated-bucket-name> --region <region_code>
aws s3 mb s3://store-tfstate --region eu-central-1

# Активация ведения версий для созданного хранилища
aws s3api put-bucket-versioning --bucket store-tfstate --versioning-configuration Status=Enabled

# Хотя terraform использует S3 для хранения фактического состояния, ему нужен 
# какой-то механизм блокировки, которого S3 не предоставляет. Это делается 
# через DynamoDB. Таблица должна иметь первичный ключ с именем LockID в виде строки.
aws dynamodb create-table \
  --table-name tfstate-lock \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --provisioned-throughput ReadCapacityUnits=20,WriteCapacityUnits=20 \
  --profile default \
  --region eu-central-1

# Проверка синтаксиса конфигурационных файлов Terraform
terraform fmt
terraform validate

# Инициализация Terraform
terraform init

# Проверка корректности конфигурационных файлов Terraform
terraform validate

# Вывод списка используемых рабочих окружений (workspace) в Terraform:
terraform workspace list

    # В случае необходимости, можно создать новое рабочее окружение, например dev:
    terraform workspace new dev

    # А теперь на него можно переключиться:
    terraform workspace select dev

# Вывод плана вносимых изменений в процессе развертывания кластера на AWS:
terraform plan

# Запуск развертывания кластера на AWS:
terraform apply

# Экспорт конфигурации Kubernetes (AWS EKS)
# /home/fomindn/.kube/config
aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)

# Проверка созданных инстансов AWS EC2:
aws ec2 describe-instances --output table

# Проверка подключения к Kubernetes EKS в кластере AWS:
kubectl get svc
# Должен появится сервис kubernetes в пространстве имен по умолчанию:

# Вывод пространства имен в кластереAWS EKS:
kubectl get ns

# Развертывание панели управления Kubernetes Dashboard:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml

# Создаём дополнительную учетную запись 'eks-admin' с административными правами для безопасного подключения к 
# панели мониторинга Dashboard:
kubectl apply -f ../k8s/aws-eks/eks-admin-service-account.yaml
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')
    # Вывод:
    #    Name:         eks-admin-token-mtc2h
    #    Namespace:    kube-system
    #    Labels:       <none>
    #    Annotations:  kubernetes.io/service-account.name: eks-admin
    #                kubernetes.io/service-account.uid: 22ba0956-4ef2-402b-bc20-944634a513ac
    #
    #    Type:  kubernetes.io/service-account-token
    #
    #    Data
    #    ====
    #    ca.crt:     1025 bytes
    #    namespace:  11 bytes
    #    token:      <authentication_token>
kubectl proxy
# Чтобы получить доступ к панели мониторинга, открыть следующую ссылку в веб-браузере:
# http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login
# Выбрать Token, вставить вывод <authentication_token> из предыдущей команды в поле Token и выбрать SIGN IN.

# Подключение к MySQL в AWS RDS:
# mysql -h $(terraform output -raw rds_hostname) -u $(terraform output -raw rds_username) -p $(terraform output -raw rds_port)  db_name

# Уничтоение всей созданной Terraform инфраструктуры:
terraform destroy -auto-approve

# Удаление S3 хранилища
aws s3 rm s3://store-tfstate --recursive
aws s3api put-bucket-versioning --bucket store-tfstate --versioning-configuration Status=Suspended
aws s3api delete-objects --bucket store-tfstate \
    --delete "$(aws s3api list-object-versions --bucket store-tfstate | \
                jq '{Objects: [.Versions[] | {Key:.Key, VersionId : .VersionId}], Quiet: false}')"
aws s3 rb s3://store-tfstate --force
