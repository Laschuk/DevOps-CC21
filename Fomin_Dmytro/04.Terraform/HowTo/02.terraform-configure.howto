# Terraform - программное обеспечение с открытым исходным кодом, созданное HashiCorp. 
# Пользователи определяют и предоставляют инфраструктуру центра обработки данных с 
# помощью декларативного языка конфигурации, известного как HCL (HashiCorp Configuration 
# Language) или JSON. Такой подход является реализацией IaC (Infrastructure as code).

# Установка Terraform CLI:
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt -f install terraform

# Проверка установки:
terraform version
# Вывод:
    Terraform v1.1.5
    on linux_amd64

# Установка пакета автозавершения ввода комманды Terraform:
terraform -install-autocomplete

# Инициализация Terraform:
terraform init
# После запуска данной комманды, Terraform скачивает плагины провайдеров (provider) 
# и создает скрытую директорию ".terraform" в директории с конфигурационными файлами 
# Terraform "04.Terraform/aws-eks/". Также создается файл блокировки (lock file) с
# именем ".terraform.lock.hcl" в котором указана используемая версия скаченного провайдера.
# Таким образом можно контролировать версию провайдера, например при смене версии.

# Комманда terraform fmt автоматически обновляет конфигурации в текущем каталоге для 
# удобочитаемости и согласованности.
terraform fmt

# Комманда terraform validate проверяет синтаксис и корректность конфигурационных файлов.
# Если конфигурационные файлы корректны, программа выведет сообщение:
# Success! The configuration is valid.
terraform validate

# Команда terraform plan оценивает конфигурацию Terraform, чтобы определить желаемое состояние всех 
# объявленных ресурсов, а затем сравнивает это желаемое состояние с реальными объектами инфраструктуры, 
# управляемыми текущим рабочим каталогом и рабочей областью. Отображает какие изменения будут внедрены
# в инфраструктуру AWS.
terraform plan

# Создание инфраструктуры производится по комманде:
terraform apply
#
# Прежде чем применять какие-либо изменения, Terraform распечатывает план выполнения, в котором
# описаны действия, которые Terraform предпримет, чтобы изменить вашу инфраструктуру в соответствии 
# с конфигурацией.
#
# Terraform приостановит работу и будет ждать одобрения, прежде чем продолжить. Если что-то в плане 
# кажется неправильным или опасным, можно безопасно прервать выполнение комманды на данном этапе не 
# внося никаких изменений в инфраструктуру.
#
# Если всё выглядит правильно и запланированно, то введя 'yes' в качестве подтверждения, Terraform
# продолжит создание инфраструктуры. Выполнение плана займет несколько минут, так как Terraform 
# ожидает, пока экземпляр EC2 станет доступным.
#
# После применения инфраструктуры, Terraform создает файл "terraform.tfstate" в котором хранятся 
# идентификаторы и свойства ресурсов, которыми Terraform управляет и может обновлять или уничтожать 
# эти ресурсы в будущем. Данный файл может содержать КОНФИДЕНЦИАЛЬНЫЕ ДАННЫЕ, поэтому должен изменить
# ограниченный доступ. На продакшине рекомендуется использовать Terraform Cloud или Terraform Enterprise
# для хранения данного файла. Terraform также поддерживает использование других удаленных серверных 
# модулей (backends), которые определяют, где хранятся моментальные снимки состояния Terraform:
#   https://www.terraform.io/language/settings/backends

# Проверка текущего состояния:
terraform show
# Когда Terraform создал экземпляр EC2, он также собрал метаданные ресурса от провайдера AWS и записал 
# метаданные в файл состояния "terraform.tfstate".

# Terraform имеет встроенную команду terraform state для расширенного управления состоянием. 
# Используйте подкоманду list, чтобы вывести список ресурсов в состоянии вашего проекта:
terraform state list

