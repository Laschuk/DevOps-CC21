 # Генерируем самоподписанные SSL сертификаты для работы по протоколу https
 openssl req -x509 -newkey rsa:4096 \
 -nodes -sha256 \
 -days 365 \
 -subj "/C=UA/ST=Khmelnytskyi/L=Khmelnytskyi/O=Jenkins/CN=localhost" \
 -keyout localhost_ssl_private.key \
 -out localhost_ssl_cert.pem
 
 # Генерируем ssh ключи для доступа к gitHub
 ssh-keygen -t rsa -b 4096 -N '' -f localhost-jenkins-ssh-key -C fomindn@gmail.com
 # Сгенерируется два ключа - публичный (.pub) и приватный. Публичный вставляем на GitHub (https://github.com/settings/keys),
 # а приватный вставляем в Jenkins (http://localhost:8080/credentials/), указывая в качестве пользователя - пользователя 
 # репозитория GitHub(!), а в поле "Private Key" вставляем приватный ключ.

 # Настройка WebHook на GitHub (https://github.com/fomindn/DevOps-crash-course/settings/hooks),
 # где - DevOps-crash-course - это имя репозитория на GitHub.
 # В поле "Payload URL" вставляем URL на Jenkins (http://81d1-93-77-12-218.ngrok.io/github-webhook/).
 # В данном случае для доступа к локальному ресурсу Jenkins пользуемся сервисом NGrok, который создает
 # тунель к localhost (обратный proxy-сервер).
 # В после "Secret" вставляем хеш-код сгенерированный в Jenkins (http://localhost:8080/user/admin/configure, блок API Token).
 
 # Export environments
 export JENKINS_USER_ID=jenkins
 export JENKINS_API_TOKEN=v2v23v2v244b35n4n5n4n2n32n4n34n35n35n3
 
 # View our environments
 env | grep JENKINS
 
 # Remote connection to Jenkins server CLI
 java -jar jenkins-cli.jar -s http://localhost:8080 who-am-i
 
  # Run command on remote Jenkins CLI. Export Job from Jenkins to XML file
 java -jar jenkins-cli.jar -s http://localhost:8080 get-job MyJobNumber-1 > MyJobNumber-1.xml

  # Run command on remote Jenkins CLI. Create new Job in Jenkins from XML file
 java -jar jenkins-cli.jar -s http://localhost:8080 create-job MyJobNumber-1 < MyJobNumber-1.xml

# Список установленных плагинов в алфавитном порядке
curl -sSL "http://admin:admin@localhost:8080/pluginManager/api/xml?depth=1&xpath=/*/*/shortName|/*/*/version&wrapper=plugins" | \
perl -pe 's/.*?<shortName>([\w-]+).*?<version>([^<]+)()(<\/\w+>)+/\1 \2\n/g'|sed 's/ /:/' | sort

#### Мега крутая и важная вещь!!! Экспорт/Импорт credentials в Jenkins!!! ####
export JENKINS_USER_ID=jenkins
export JENKINS_API_TOKEN=v2v23v2v244b35n4n5n4n2n32n4n34n35n35n3
export JENKINS_SERVER=http://localhost:8080/
export NEW_JENKINS_SERVER=http://localhost:9090/
export NEW_JENKINS_USER_ID=jenkins
export NEW_JENKINS_API_TOKEN=w4w43v2v123b35n4n5n4n2n4564n34n35n9999
# Экспорт со старого Jenkins credentials
java -jar jenkins-cli.jar -noCertificateCheck -s $JENKINS_SERVER -auth $JENKINS_USER_ID:$JENKINS_API_TOKEN list-credentials-as-xml "system::system::jenkins" > /tmp/jenkins_credentials.xml
# Импорт credentials в новый Jenkins
java -jar jenkins-cli.jar -noCertificateCheck -s $NEW_JENKINS_SERVER -auth $NEW_JENKINS_USER_ID:$NEW_JENKINS_API_TOKEN import-credentials-as-xml "system::system::jenkins" < /tmp/jenkins_credentials.xml
# Удаляем временный файл с credentials
rm -f /tmp/jenkins_credentials.xml
